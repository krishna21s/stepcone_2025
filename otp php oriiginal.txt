<?php
header('Content-Type: application/json');
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: *");
header("Access-Control-Allow-Headers: *");

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);  // Respond OK 
    exit(); // Stop further execution
}

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

// Include PHPMailer library (Install via Composer or download manually)
require './phpmailer/src/Exception.php';
require './phpmailer/src/PHPMailer.php';
require './phpmailer/src/SMTP.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $userpostemail = json_decode(file_get_contents("php://input"));
    $email = $userpostemail->email;

    // Validate email format
    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo json_encode(["status" => "error", "message" => "Invalid email address."]);
        exit();
    }

    $apiKey = '59d217b710520382de14b4f339646ef3406f4e02'; // Replace with your actual Hunter.io API key
    $verificationUrl = "https://api.hunter.io/v2/email-verifier?email=" . urlencode($email) . "&api_key=" . $apiKey;

    $response = file_get_contents($verificationUrl);
    $result = json_decode($response, true);

    if (isset($result['data']['status']) && ($result['data']['status'] !== 'valid' || $result['data']['status'] !== 'accept_all')) {
        echo json_encode(["status" => "error", "message" => "Email address does not exist."]);
        exit();
    }

    $username = $userpostemail->username;

    // Generate OTP
    $otp = rand(100000, 999999);

    // Set up PHPMailer
    $mail = new PHPMailer(true);
    $mail->SMTPDebug = 0; // Enable verbose debug output (set to 0 for no output)

    // SMTP configuration
    $mail->isSMTP();
    $mail->Host = 'smtp.gmail.com'; // SMTP server
    $mail->SMTPAuth = true;
    $mail->Username = 'yunusabdul274@gmail.com'; // Your email
    $mail->Password = 'qqmz lrqg xnxf nfvq'; // Your app-specific password
    $mail->SMTPSecure = 'tls'; // Encryption - ssl (deprecated) or tls
    $mail->Port = 587; // Port for TLS

    // Email settings
    $mail->setFrom('yunusabdul274@gmail.com', 'StepCone Team'); // Sender's email
    $mail->addAddress($email); // Recipient's email
    $mail->isHTML(true);
    $mail->Subject = 'StepCone Email OTP verification';

    // Email body
    $mail->Body = "
    <div style='font-family: Arial, sans-serif; color: #333; line-height: 1.6; '>
        <h2 style='text-align: center; color: #4CAF50;'>StepCone OTP Verification</h2>
        <p>Dear <strong>$username</strong>,</p>
        <p>We have received a request to log in to your account. To proceed, please use the One-Time Password (OTP) below:</p>
        <div style='text-align: center; margin: 20px 0;'>
            <span style='display: inline-block; padding: 7px 15px; font-size: 1.5em; color: #fff; background-color: #007BFF; border-radius: 8px;'>
                $otp
            </span>
        </div>
        <p style='font-size: 0.9em; color: #555;'>This OTP is valid for <strong>5 minutes</strong>. If you did not request this login, please ignore this message.</p>
        <br>
        <p>Best regards,</p>
        <p><strong>StepCone Team</strong></p>
    </div>
";

    // Send email
    try {
        if ($mail->send()) {
            echo json_encode(["otp" => $otp, "message" => "OTP sent successfully."]);
        } else {
            throw new Exception($mail->ErrorInfo);
        }
    } catch (Exception $e) {
        echo json_encode(["status" => "error", "message" => "Failed to send OTP. Error: " . $e->getMessage()]);
    }
} else {
    echo json_encode(["status" => "error", "message" => "Invalid request method."]);
}
